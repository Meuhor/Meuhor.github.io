.. include:: ../common_roles/common.rst


================================
System Verilog Handnotes 01 [#]_
================================

笔记
######

验证导论
----------

与硬件描述语言相比(HDL), 硬件验证语言(HVL)具有一些典型的性质: 
    #. 受约束的随机激励生成
    #. 功能覆盖率
    #. 更高层次的结构, 尤其是面向对象的编程
    #. 多线程及线程的通信
    #. 支持HDL数据类型, 例如Verilog的四状态数值
    #. 集成了事件仿真器, 便于对设计施加控制

测试平台进行测试的步骤: 
    #. 产生激励
    #. 把激励施加到DUT上
    #. 捕捉响应
    #. 检验正确性
    #. 对照整个验证目标测算进展情况

数据类型
-----------

变量类型
+++++++++

- logic: logic类型不能有多个结构性驱动
- 双状态数据类型
    - bit: 无符号, 单比特
    - int: 有符号, 32比特
    - byte: 有符号, 8比特
    - shortint: 有符号, 16比特
    - longint: 有符号, 64比特
    - real: 有符号, 双精度浮点数
- 四状态数据类型
    - integer: 有符号, 32比特
    - time: 无符号, 64比特
- 四状态到二状态转换时, Z 和 X 会被转换成0或1, 适用 $isunknown(expression) 可以在表达式的任意位出行X或Z时返回1

数组
+++++++

- 定宽数组
    .. code-block:: systemverilog
    
        int temp[15:0]; // 16个 int, temp[15], ..., temp[0]
        int cstyle_temp[16]; // 16个int, cstyle_temp[15], ..., cstyle_temp[0], cstyle, 故等同于 temp[0:15]
        int array[7:0][3:0]; // 32个int, 8行4列
        int cstyle_array[8][4]; // 32个int, 8行4列, cstyle, 故等同于 array[0:7][0:3]
    
- 对于数组, 若下标访问越界, 则会给出一个默认值, 四状态返回X, 双状态返回0. 线网在未驱动的情况下, 输出时Z

.. _非压缩数组:

- 很多 SystemVerilog 仿真器在存放数组元素时使用32比特的字边界, 所以 byte, shortint, int, 存放在一个字中, longint 存放在两个字中. 非压缩 (非合并) 数组中, 字的低位用来存放数据, 例如
    .. code-block:: systemverilog
    
        bit [7:0] b_unpack[3];
    
    +-------------+-----+-----+-----+-----------------+
    | b_unpack[0] | ... | ... | ... | 7 6 5 4 3 2 1 0 |
    +-------------+-----+-----+-----+-----------------+
    | b_unpack[1] | ... | ... | ... | 7 6 5 4 3 2 1 0 |
    +-------------+-----+-----+-----+-----------------+
    | b_unpack[2] | ... | ... | ... | 7 6 5 4 3 2 1 0 |
    +-------------+-----+-----+-----+-----------------+

- 对于四值类型, 仿真器通常使用两个或以上 **连续** 的字来存放, 故比存放双状态多一倍的空间
- 数组初始化
    .. code-block:: systemverilog
    
        int ascend[4] = '{0, 1, 2, 3}; // int ascend[0:3];
        int descend[5]; // int descend[0: 4];
    
        descend = '{4, 3, 2, 1, 0};
        descend[0:2] = '{5, 6, 7};
        ascend = '{4{8}}; // {8, 8, 8, 8}
        descend = '{9, 8, default : 1}; // {9, 8, 1, 1, 1} 
- for 和 foreach
    .. code-block:: systemverilog

        initial begin
            bit [31:0] src[5], dst[5];
            for (int i = 0; i < $size(src); i++) // i 被声明为 for 循环内部变量
                src[i] = i;
            foreach (dst[j]) // j 将被自动声明, j 仅在 foreach 循环内有效
                dst[j] = src[j] * 2;
        end

        int md[2][3] = '{'{0, 1, 2}, '{3, 4, 5}};
        initial begin
            $display("Initial value:");
            foreach (md[i, j]) // 注意[i, j], 而非[i][j]
                $display("md[%0d][%0d] = %0d", i, j, md[i][j]);

        end

- foreach 的遍历次序与数组声明时的大小端次序一致
    .. code-block:: systemverilog

        int f[5];
        int rev[6:2];
        initial begin
            foreach (f[i])
                f[i] = i;
            // same as
            for (int i = 0; i <= 4; i++)
                f[i] = i;
            foreach (rev[i]) 
                rev[i] = i;
            // same as
            for (int i = 6; i >= 2; i--)
                rev[i] = i;
        end

- 对于多维数组 md[2][3], foreach[i]用于遍历行, 而 foreach[, j]用于遍历列
- 数组的复制和比较: 数组可以作为一个整体复制给另一个数组, 也可以用于比较但仅限于 **相等** 或 **不等**
- 同时使用位下标和数组下标
    .. code-block:: systemverilog

        initial begin
            bit [31:0] src[5] = '{5{5}};
            $displayb (src[0],, // 'b101或'd5
                       src[0][0],, // 'b1
                       src[0][2:1], // 'b10
                      );

压缩数组
+++++++++

- 与 :ref:`非压缩数组 <非压缩数组>` 不同, 仿真器一般用连续的的比特来存放压缩数组
- 压缩数组必须使用 [msb:lsb] 的形式定义位宽, 其位宽作为数据类型的一部分, 在变量名前指定

    .. code-block:: systemverilog

        bit bytes0 [4][8]; // 非压缩数组
        bit bytes1 [3:0][7:0]; // 非压缩数组
        bit [7:0] bytes2[3:0]; // 非压缩数组

        bit [3:0][7:0] bytes3; // 压缩数组, 4个字节组成的32比特

        bit [3:0][7:0] barray[3]; // 压缩数组和非压缩数组混用, 表示3个压缩数组

    +-----------------+-----------------+-----------------+-----------------+
    | bytes3[3]       | bytes3[2]       | bytes3[1]       | bytes3[0]       |
    +-----------------+-----------------+-----------------+-----------------+
    | 7 6 5 4 3 2 1 0 | 7 6 5 4 3 2 1 0 | 7 6 5 4 3 2 1 0 | 7 6 5 4 3 2 1 0 |
    +-----------------+-----------------+-----------------+-----------------+

    +-----------+-----------------+-----------------+-----------------+-----------------+
    |           | barray[i][3]    | barray[i][2]    | barray[i][1]    | barray[i][0]    |
    +-----------+-----------------+-----------------+-----------------+-----------------+
    | barray[0] | 7 6 5 4 3 2 1 0 | 7 6 5 4 3 2 1 0 | 7 6 5 4 3 2 1 0 | 7 6 5 4 3 2 1 0 |
    +-----------+-----------------+-----------------+-----------------+-----------------+
    | barray[1] | 7 6 5 4 3 2 1 0 | 7 6 5 4 3 2 1 0 | 7 6 5 4 3 2 1 0 | 7 6 5 4 3 2 1 0 |
    +-----------+-----------------+-----------------+-----------------+-----------------+
    | barray[2] | 7 6 5 4 3 2 1 0 | 7 6 5 4 3 2 1 0 | 7 6 5 4 3 2 1 0 | 7 6 5 4 3 2 1 0 |
    +-----------+-----------------+-----------------+-----------------+-----------------+

- @操作符只能用于标量和压缩数组
    .. code-block:: systemverilog
        
        bit [3:0][7:0] bytes; // 压缩数组, 4个字节组成的32比特
        always @(bytes) begin
            // some code
        end

        bit [3:0][7:0] barray[3]; // 压缩数组和非压缩数组混用, 表示3个压缩数组
        always @(barray[2] or barray[1] or barray[0]) begin
            // some code
        end

动态数组
+++++++++

    .. _非显式new操作的删除:
    
    .. code-block:: systemverilog 
    
        int dyn[], d2[];
        initial begin
            dyn = new[5]; // 分配5个元素
            foreach (dyn[j]) dyn[j] = j; // 对元素进行初始化
            d2 = dyn; // 复制一个动态数组, 这里非显示的使用了 new[], 为 d2 分配了元素, d2 与 dyn 是独立的
            d2[0] = 5; // 修改d2的部分值
            $display (dyn[0], d2[0]); // 量值不同, 印证 d2 与 dyn 独立
            dyn = new[20](dyn); // 为 dyn 重新分配20个元素, 并将原 dyn 的元素赋值给 dyn 的前5个元素
            dyn = new[100]; // 为 dyn 重新分配100个元素
            dyn.delete(); // 删除 dyn 的所有元素
        end

        bit [7:0] mask[] = '{8'b0000_0000, 8'b0000_0001}; // c style

队列 [#]_
+++++++++

- 队列下标使用 [$] 表示, 元素编号为0到$
- 不要对队列使用 new[]

.. _`队列的 pop_front 和 pop_back`:
    
    .. code-block:: systemverilog

        int j, q2[$] = {3, 4}, q[$] = {0, 2, 5}; // 队列初始化不使用'{}而使用{}
        initial begin
            q.insert(1, j); // {0, 1, 2, 5} 在第1个元素前插入 j, 或在第0个元素后插入 j, 或使 j 成为第1个元素 
            q.insert(3, q2); // {0, 1, 2, 3, 4, 5} 在第3个元素前插入队列 q2, **并非所有的编译器均支持这种操作**
            q.delete(1); // {0, 2, 3, 4, 5} 删除第一个元素
            // 下面的操作执行速度很快
            q.push_front(6); // {6, 0, 2, 3, 4, 5} 在队列前插入
            j = q.pop_back; // {6, 0, 2, 3, 4} j = 5
            q.push_back(8); // {6, 0, 2, 3, 4, 8} 在队列尾插入
            j = q.pop_front; // {0, 2, 3, 4, 8} j = 6
            foreach (q[i]) $display(q[i]);
            q.delete(); // 删除整个队列
        end

- 使用 [$:2] 或 [2:$] 的方式来访问队列

    .. code-block:: systemverilog 
        
        int j = 1, q2[$] = {3, 4}, q[$] = {0, 2, 5};
        initial begin
            q = {q[0], j, q[1:$]}; // {0, 1, 2, 5}
            q = {q[0:2], q2, q[3:$]}; // {0, 1, 2, 3, 4, 5}
            q = {q[0], q[2:$]}; // {0, 2, 3, 4, 5}
            // 下面的操作执行速度很快
            q = {6, q}; // {6, 0, 2, 3, 4, 5}
            j = q[$]; // j = 5
            q = q[0:$-1]; // {6, 0, 2, 3, 4}
            q = {q, 8}; // {6, 0, 2, 3, 4, 8}
            j = q[0]; // j = 6
            q = q[1:$]; {0, 2, 3, 4, 8}
            q = {}; // q.delete();
        end

关联数组
+++++++++

- 仿真器可以采用树或哈希表的形式来存放关联数组，但有一定的额外开销

问题
######

数据类型
-----------

变量类型
+++++++++

#. 四状态到二状态转换时, Z和X会被转换成0或1, 具体规则
#. 对于非显式的 new[] 所分配的空间, 是否需要显示的 delete, 如 :ref:`动态数组 <非显式new操作的删除>` 中的d2
#. 队列的 :ref:`pop_front 和 pop_back <队列的 pop_front 和 pop_back>` 是否需要加 ()

.. footnotes
.. [#] 《SystemVerilog验证测试平台编写指南》
.. [#] 在队列的最前面和最后面存取数据非常方便, 因而操作速度也最快

