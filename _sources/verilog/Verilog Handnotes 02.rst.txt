.. include:: ../common_roles/common.rst

=====================================
Verilog Handnotes 02 —— 代码规范 [#]_
=====================================

笔记
######


Verilog语言编写规范
-------------------

* 宏在整个编译期都有效, 在一个文件中定义宏, 那么在其后编译的所有文件都可以调用, 直到遇到`undef关键词, 为避免文件编译顺序不同导致编译结果不同, 不推荐在文件中使用\`define, \`undef关键词进行宏操作
* 避免使用宏定义值
* 对于是需要通过宏判断完成调式的代码(如debug info)的选择编译, 要求不定义该宏为默认情况, 即不定义宏的情况不展开宏代码

* 用parameter定义端口参数
* 用localparameter定义模块内参数

* \`timescale step/precision timescale可按文件定义, 编译时, 若该文件指定了timescale则编译该文件后文件的timescale与指定值一致, 并沿用至下一个文件, 知道再次定义timescale。因此, 不同文件可能工作于不同的timescale, 可能导致后仿时Foundry库中specify定义的延迟混乱, 以及其他的时间步进错误；不同文件工作于不同的timescale, 每个timescale在仿真器处理时都存在于不同的分片下, 容易造成多分片交互的竞争与冒险

* 判断(比较)时要求匹配位宽

* 可变向量

.. code-block:: verilog
       
    genvar i;
    generate 
        for(i = 0; i < 2; i = i + 1) begin : data_montage
            assign data[i * 8 + 7 -: 8] = ram[i * 8 + 7 -: 8]; // start_bit-: width, 表示从start_bit开始递减, 位宽为width；start_bit+: width与之类似
            // assign data[i * 8 + 7: i * 8 - 7] = ram[i * 8 + 7: i * 8 - 7];
        end
    endgenerate

    reg[3:0] channel;
    always @(posedge clk) begin
        curr_data <= data[channel * 8 + 7 -: 8]; // 会被综合成选择器, 注意data的最大位宽
    end

会被综合成选自额

* 向量方向
  参考 Verilog Handnotes 01 :ref:`Verilog语言编写规范` 的MSB/LSB部分

.. code-block:: verilog

    // 简而言之 data[MSB:LSB]在显示时也是[左MSB-LSB右]

    reg[3:0][3:0] data1;
    data1[3] = 4'h0;
    data1[2] = 4'h1;
    data1[1] = 4'h2;
    data1[0] = 4'h3;
    // data1 = 16'h0123;
    
    reg[0:3][3:0] data2;
    data2[0] = 4'h0;
    data2[1] = 4'h1;
    data2[2] = 4'h2;
    data2[3] = 4'h3;
    // data2 = 16'h0123;
    
    reg[3:0] data3;
    data3[3] = 1'b1;
    data3[2] = 1'b0;
    data3[1] = 1'b0;
    data3[0] = 1'b0;
    // data3 = 4'b1000;
    
    reg[0:3] data4;
    data4[0] = 1'b1;
    data4[1] = 1'b0;
    data4[2] = 1'b0;
    data4[3] = 1'b0;
    // data4 = 4'b1000;
    
    reg[3:0] data5[3:0];
    data5[3] = 4'h0;
    data5[2] = 4'h1;
    data5[1] = 4'h2;
    data5[0] = 4'h3;
    // data5 = 16'h0123;
    
    reg[0:3] data6[3:0];
    data6[0] = 4'h0;
    data6[1] = 4'h1;
    data6[2] = 4'h2;
    data6[3] = 4'h3;
    data[6] = 16'h0123;

* >>>与<<<用于算术移位, 将符号位填补移出的位
* 在case中可以用default表示最后一个分支以提高代码覆盖率
* always敏感变量列表中避免出现双时钟沿或双沿出发条件
* always敏感变量列表中复位建议采用下降沿, 以降低毛刺风险, 建议使用同步复位, 以降低recovery-time和remove-time风险
* 禁止不加保护或反馈的情况下使用两套电路经相同输入信号分别描述产生相关联信号, 当时钟不稳定产生亚稳态或寄存器发生异常跳变时, 相关联信号发生不可纠偏离, 导致电路不可自动恢复

.. image:: ../img/conflict.png
    
* 使用always(*)描述组合逻辑时可以并列使用if语句, 执行顺序是从上至下, 有多少个条件被满足就会被执行多少次, 但在时序逻辑中不同, 使用这种语法需要特别注意对综合时序的影响

* generate块配合if可以用于代码选择, 默认当条件不满足时, 部分代码不会被综合, 用以代替宏(全局有效), 可以实现由模块参数列表进行传递从而控制每个模块

典型电路
-------------------

时钟和复位
^^^^^^^^^^^

* 继续强调在设计中使用统一的时钟沿触发, 避免使用内部产生时钟及门控时钟(内部产生的时钟信号不能作为扫描链的一部分, 限制了芯片的可测性, 而且综合时很难进行时序约束), 若设计中用到多个时钟, 须将时钟产生模块在顶层单独放置, 保证每个模块只使用一个是时钟信号, 便于layout时时钟树优化
* 时钟信号不能做数据使用
* 复位信号的处理与时钟信号类似

资源共享
^^^^^^^^^^

* 资源共享尽量共享复杂运算单元, 可以采用函数来定义；采用括号等方式控制综合结果, 实现资源共享

.. code-block:: verilog

    // not recommended
    always @(*) begin
        sum = 2'd0;
        if(sel) begin
            sum = a + b;
        end else begin
            sum = c + d;
        end
    end

    reg temp1;
    reg temp2;

    // recommended, 综合后实现了加法器的复用
    always @(*) begin
        temp1 = 1'd0;
        temp2 = 1'd0;
        if(sel) begin
            temp1 = a;
            temp2 = b;
        end else begin
            temp1 = c;
            temp2 = d;
        end
        sum = temp1 + temp2;
    end

.. code-block:: verilog

    // not recommended
    always @(*) begin
        s1 = a + b;
        s2 = a + b + c;
    end

    // recommended, 综合后实现了运算结果的服用
    always @(*) begin
        s1 = a + b;
        s2 = c + (a + b);
    end


FIFO
^^^^^^^^

* 异步FIFO采用将二进制地址转换为格雷码地址的方法

状态机
^^^^^^^^^^

* 状态机状态编码的选择 [#]_

+----------+--------------------------+----------------------------------------+
| 编码类型 | 优点                     | 缺点                                   |
+==========+==========================+========================================+
| Binary   | 编码位宽小               | 译码逻辑复杂, 消耗资源多, 无法避免毛刺 |
+----------+--------------------------+----------------------------------------+
| Gray     | 编码位宽小               | 译码逻辑复杂, 消耗资源多               |
+----------+--------------------------+----------------------------------------+
| One-hot  | 组合逻辑简单, 运行频率高 | 无法避免毛刺                           |
+----------+--------------------------+----------------------------------------+

* 在模块划分时, 把状态机分离出来, 便于综合工具对状态机进行优化
* 推荐使用三段式FSM描述方法:
    #. 第一个always块, 描述采用同步时序逻辑的状态转移
    #. 第二个always块, 描述组合逻辑判断状态转移条件
    #. 第三个always块, 使用同步时序逻辑描述每个状态的输出


乒乓操作
^^^^^^^^^^

* 乒乓操作常用于数据流的控制处理中, 在流水线处理中, 完成数据的无缝缓冲与处理

.. image:: ../img/pingpang.png





异步处理
-------------------

* 跨时钟域(CDC, Clock Domain Crossing)
* 跨时钟域可能存在的问题有：

    #. 组合毛刺
    #. 数据丢失
    #. 多路扇出
    #. 信号汇聚
    #. 异步复位释放不可靠

* 组合毛刺

.. image:: ../img/glitch.png



待解决(包括问题)
##################

#. |check| 多维压缩数组向量方向 
#. |check| 乒乓操作典型代码 [#]_
#. |uncheck| 同步、异步FIFO典型代码 



.. footnotes
.. [#] 读书笔记(代码规范)基于Verilog-2001规范 2020-12-11 
.. [#] 结合Verilog Handnotes 01 :ref:`VHDL数字电路设计指导` , 三种编码的状态空间不同, 因此对于非法状态的检测所需的电路逻辑代价也不同
.. [#] 乒乓操作典型代码
    示例中用flag信号翻转完成乒乓操作的指示
    Buffer写侧：fifo1在flag=0时连续写入8拍的输入数据, 而fifo2在flag=1时连续写入8拍的输入数据
    Buffer读侧：fifo1在flag=1时连续读出8拍缓存的数据, 而fifo2在flag=0时连续读出8拍缓存的数据
.. highlight:: verilog
.. literalinclude:: pp.v
